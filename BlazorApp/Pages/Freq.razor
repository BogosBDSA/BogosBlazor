@page "/freq"
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory
@using BlazorApp
@using System.Collections.Immutable


<h1>Call web API from a Blazor Server Razor Gitfrequency</h1>
<PageTitle>Gitfrequency</PageTitle>

@if (geDatabaseError)
{
    <p>Unable to get result from database Please try again later.</p>
}
else
{
    <ul>
        <p>@result</p>
      @*   @foreach (var commit in commits)
        {
            <li>@commit.date</li>

        } *@
    </ul>
    
}

@code {
    private string result; 
    private bool geDatabaseError;
    private bool shouldRender;
    private string author;
    private string repo;
   // private Dictionary<string, int> commits = ImmutableDictionary.Create<string,int>();

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        author = BlazorApp.Pages.Index.authline;
        repo = BlazorApp.Pages.Index.repoline;


        var request = new HttpRequestMessage(HttpMethod.Get,
            $"http://localhost:5243/frequency/{author}/{repo}");

        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            //var commit = await JsonSerializer.DeserializeAsync<>(responseStream);

            @* var  = await Newtonsoft.Json.JsonConvert.DeserializeObject<Frequency>(responseStream);
 *@
            
            result= await response.Content.ReadAsStringAsync();
        
        }
        else
        {
         
           geDatabaseError = true;
        }

        shouldRender = true;
    }

   @*  public class Frequency
    {
        DateToFrequency = new Dictionary<string, int>();

    } *@

   
}